<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="WebApiProxy.Core.Models" #>
<#@ import namespace="System.Collections.Generic" #>
//------------------------------------------------------------------------------
//<auto-generated>
// This file is auto-generated by WebApiProxy
// Project site: https://github.com/onionhammer/WebApiProxy/
//
// Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net;
using <#= Configuration.Namespace#>.Models;

#region Proxies

namespace <#= Configuration.Namespace#>
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public static partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string <#= Configuration.Name #>BaseAddress = "<#= Configuration.Metadata.Host #>";
	}
}

#endregion

#region Models

namespace <#= Configuration.Namespace#>.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; }
		public string Content { get; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) 
			: base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content    = content;
		}
	}
	<# 
	foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("class"))) { #>	
	/// <summary>
	/// <#= model.Description.ToSummary() #>
	/// </summary>
	public partial class <#=model.Name#>
	{
		#region Constants
<# foreach(var constantItem in model.Constants) { #>

		/// <summary>
		/// <#= constantItem.Description.ToSummary() #>
		/// </summary>
		public const <#= constantItem.Type #> <#= constantItem.Name #> = <#= constantItem.Value #>;
<#}#>

		#endregion

		#region Properties
<# foreach(var propertyItem in model.Properties) { #>

		/// <summary>
		/// <#= propertyItem.Description.ToSummary() #>
		/// </summary>
		public virtual <#= propertyItem.Type #> <#= propertyItem.Name #> { get; set; }
<#}#>

		#endregion
	}<#
}#>

<# foreach(var model in Configuration.Metadata.Models.Where(m => m.Type.Equals("enum"))) 
   {
#>
	/// <summary>
	/// <#= model.Description.ToSummary() #>
	/// </summary>
	public enum <#=model.Name#>
	{
		<# foreach(var constantItem in model.Constants) { #>

		/// <summary>
		/// <#= constantItem.Description.ToSummary() #>
		/// </summary>
		<#= constantItem.Name #> = <#= constantItem.Value #>,
		<#}#>
	}<#
   }#>
}

#endregion

#region Interfaces

namespace <#= Configuration.Namespace#>.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

<# foreach(var definition in Configuration.Metadata.Definitions) { #>	
	public partial interface I<#=definition.Name#><#=Configuration.ClientSuffix#> : IClientBase
	{
<# foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable().Where(m => m != null);
		
		var bodyParameterString = "";

		if (method.BodyParameter != null)
		{
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}
	
		var parameterList = "";

		if (allParameters.Any())
		{
			var q = allParameters.Select(m => m.Type + " " + m.Name);
			if (q != null)
				parameterList = string.Join(",", q.ToArray());
		}

		var concreteReturnType = method.ReturnType.ToConcrete();
#>
<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description.ToSummary() #></param>
<# } #>
<# if (String.IsNullOrEmpty(concreteReturnType)) { #>
		/// <returns></returns>
		Task <#= method.Name #>Async(<#= parameterList#>);
<# } else { #>
		Task<<#= concreteReturnType #>> <#= method.Name #>Async(<#= parameterList#>);
<# } #>

<# } #>
	}
<# } #>
}

#endregion

#region Clients

namespace <#= Configuration.Namespace#>.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.<#= Configuration.Name #>BaseAddress)
			};
		}
		
		/// <summary>
		/// Ensures that response has a valid (200 - OK) status code
		/// </summary>
		public virtual async Task EnsureSuccessAsync(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)
				return;

			var content = await response.Content.ReadAsStringAsync();
			throw new WebApiProxyResponseException(response.StatusCode, content);
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.<#= Configuration.Name #>BaseAddress)
			};
		}

		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam<T>(T value) 
		{
			return value == null
				 ? string.Empty
				 : System.Net.WebUtility.UrlEncode(value.ToString());
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTimeOffset value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && HttpClient != null)
			{
				HttpClient.Dispose();
				HttpClient = null;
			}
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Destructor
		/// </summary>
		~ClientBase() 
		{
			Dispose(false);
		}
	}

	/// <summary>
	/// Helper class to access all clients at once
	/// </summary>
	public partial class WebApiClients
	{
<# foreach(var definition in Configuration.Metadata.Definitions) { #>
		public <#=definition.Name#><#= Configuration.ClientSuffix#> <#= definition.Name #> { get; }
<# } #>
		
		protected IEnumerable<Interfaces.IClientBase> Clients
		{
			get
			{
<# foreach(var definition in Configuration.Metadata.Definitions) { #>
				yield return <#= definition.Name #>;
<# } #>
			}
		}

		public WebApiClients(Uri baseAddress = null)
		{
			if (baseAddress != null)
				Configuration.<#= Configuration.Name #>BaseAddress = baseAddress.AbsoluteUri;

<# foreach(var definition in Configuration.Metadata.Definitions) { #>
			<#= definition.Name #> = new <#=definition.Name#><#= Configuration.ClientSuffix#>();
<# } #>
		}

		public void SetAuthentication(AuthenticationHeaderValue auth)
		{
<# foreach(var definition in Configuration.Metadata.Definitions) { #>
			<#= definition.Name #>.HttpClient.DefaultRequestHeaders.Authorization = auth;
<# } #>
		}
		
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
<# foreach(var definition in Configuration.Metadata.Definitions) { #>
				<#= definition.Name #>.Dispose();
<# } #>
			}
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		~WebApiClients() 
		{
			Dispose(false);
		}
	}

<# foreach(var definition in Configuration.Metadata.Definitions) { #>
	/// <summary>
	/// <#= definition.Description.ToSummary() #>
	/// </summary>
	public partial class <#=definition.Name#><#= Configuration.ClientSuffix#> : ClientBase, Interfaces.I<#=definition.Name#><#=Configuration.ClientSuffix#>
	{
		#region Constructors

		/// <summary>
		/// <#= definition.Description.ToSummary() #>
		/// </summary>
		public <#=definition.Name#><#= Configuration.ClientSuffix#>() : base()
		{
		}

		/// <summary>
		/// <#= definition.Description.ToSummary() #>
		/// </summary>
		public <#=definition.Name#><#= Configuration.ClientSuffix#>(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#endregion

		#region Methods

<# foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable();
		
		var bodyParameterString  = ", default(HttpResponseMessage)";
		var parameterNameList    = "";
		var concreteReturnType   = method.ReturnType.ToConcrete();

		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}

		if (allParameters.Any())
			parameterNameList =  string.Join(", ", allParameters.Select(m => m.Name));

		var parameterList = "";

		if (allParameters.Any())
		{
			var q = allParameters.Where(m => m != null).Select(m => m.Type + " " + m.Name);

			if (q != null)
				parameterList = string.Join(",", q.ToArray());
		}

		var postOrPutOrPatch =  method.Type.ToTitle() == "Post" || method.Type.ToTitle() == "Put" || method.Type.ToTitle() == "Patch";
		var url = ("\"" + method.Url.Replace("{", "\" + ").Replace("}", " + \"") + "\"").Replace(" + \"\"","");
#>
<# if (String.IsNullOrEmpty(concreteReturnType)) { #>
		/// <summary>
		/// <#= method.Description.ToSummary() #>
		/// </summary>
<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description.ToSummary() #></param>
<# } #>
		/// <returns></returns>
		public virtual async Task <#= method.Name.StripAsync() #>Async(<#= parameterList#>)
		{
			var result = await HttpClient.<#=method.Type.ToTitle()#><#= postOrPutOrPatch ? "AsJson" : "" #>Async<#= postOrPutOrPatch && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : "" #>(<#=url#><#= postOrPutOrPatch ? bodyParameterString:""#>);
		
			await EnsureSuccessAsync(result);
		}

<# } else { #>
		/// <summary>
		/// <#= method.Description.ToSummary() #>
		/// </summary>
<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description.ToSummary() #></param>
<# } #>
		/// <returns></returns>
		public virtual async Task<<#= concreteReturnType #>> <#= method.Name.StripAsync() #>Async(<#= parameterList#>)
		{
			var result = await HttpClient.<#=method.Type.ToTitle()#><#= postOrPutOrPatch ? "AsJson" : "" #>Async<#= postOrPutOrPatch && method.BodyParameter != null ? "<" + method.BodyParameter.Type + ">" : "" #>(<#=url#><#= postOrPutOrPatch ? bodyParameterString:""#>);
			 
			await EnsureSuccessAsync(result);
				 
			return await result.Content.ReadAsAsync<<#= concreteReturnType #>>();
		}

<# }
} #>
		#endregion
	}
<# } #>
}

#endregion
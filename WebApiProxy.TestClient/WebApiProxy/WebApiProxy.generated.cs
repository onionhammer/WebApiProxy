//------------------------------------------------------------------------------
//<auto-generated>
// This file is auto-generated by WebApiProxy
// Project site: https://github.com/onionhammer/WebApiProxy/
//
// Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net;
using WebApiProxy.TestClient.Models;

#region Proxies

namespace WebApiProxy.TestClient
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public static partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string ApiProxyBaseAddress = "http://localhost:61048/";
	}
}

#endregion

#region Models

namespace WebApiProxy.TestClient.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; }
		public string Content { get; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) 
			: base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content    = content;
		}
	}
		
	/// <summary>
	/// 
	/// </summary>
	public partial class ItemTestViewModel
	{
		#region Constants

		#endregion

		#region Properties

		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }

		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Value { get; set; }

		#endregion
	}
}

#endregion

#region Interfaces

namespace WebApiProxy.TestClient.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

	
	public partial interface IValuesClient : IClientBase
	{
		Task<List<ItemTestViewModel>> GetAsync();

		/// <param name="id">id of the value</param>
		Task<ItemTestViewModel> GetAsync(Int32 id);

		/// <param name="name">Name of thing to find</param>
		Task<ItemTestViewModel> FindByNameAsync(String name);

		/// <returns></returns>
		Task PostAsync(ItemTestViewModel value);

	}
}

#endregion

#region Clients

namespace WebApiProxy.TestClient.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.ApiProxyBaseAddress)
			};
		}
		
		/// <summary>
		/// Ensures that response has a valid (200 - OK) status code
		/// </summary>
		public virtual async Task EnsureSuccessAsync(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)
				return;

			var content = await response.Content.ReadAsStringAsync();
			throw new WebApiProxyResponseException(response.StatusCode, content);
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.ApiProxyBaseAddress)
			};
		}

		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam<T>(T value) 
		{
			return value == null
				 ? string.Empty
				 : System.Net.WebUtility.UrlEncode(value.ToString());
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTimeOffset value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && HttpClient != null)
			{
				HttpClient.Dispose();
				HttpClient = null;
			}
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Destructor
		/// </summary>
		~ClientBase() 
		{
			Dispose(false);
		}
	}

	/// <summary>
	/// Helper class to access all clients at once
	/// </summary>
	public partial class WebApiClients
	{
		public ValuesClient Values { get; }
		
		protected IEnumerable<Interfaces.IClientBase> Clients
		{
			get
			{
				yield return Values;
			}
		}

		public WebApiClients(Uri baseAddress = null)
		{
			if (baseAddress != null)
				Configuration.ApiProxyBaseAddress = baseAddress.AbsoluteUri;

			Values = new ValuesClient();
		}

		public void SetAuthentication(AuthenticationHeaderValue auth)
		{
			Values.HttpClient.DefaultRequestHeaders.Authorization = auth;
		}
		
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				Values.Dispose();
			}
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		~WebApiClients() 
		{
			Dispose(false);
		}
	}

	/// <summary>
	/// 
	/// </summary>
	public partial class ValuesClient : ClientBase, Interfaces.IValuesClient
	{
		#region Constructors

		/// <summary>
		/// 
		/// </summary>
		public ValuesClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ValuesClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#endregion

		#region Methods

		/// <summary>
		/// Retrieve many values
		/// </summary>
		/// <returns></returns>
		public virtual async Task<List<ItemTestViewModel>> GetAsync()
		{
			var result = await HttpClient.GetAsync("api/Values");
			 
			await EnsureSuccessAsync(result);
				 
			return await result.Content.ReadAsAsync<List<ItemTestViewModel>>();
		}

		/// <summary>
		/// Get specific Value
		/// </summary>
		/// <param name="id">id of the value</param>
		/// <returns></returns>
		public virtual async Task<ItemTestViewModel> GetAsync(Int32 id)
		{
			var result = await HttpClient.GetAsync("api/Values/" + id);
			 
			await EnsureSuccessAsync(result);
				 
			return await result.Content.ReadAsAsync<ItemTestViewModel>();
		}

		/// <summary>
		/// Find by name
		/// </summary>
		/// <param name="name">Name of thing to find</param>
		/// <returns></returns>
		public virtual async Task<ItemTestViewModel> FindByNameAsync(String name)
		{
			var result = await HttpClient.GetAsync("api/Values?name=" + name);
			 
			await EnsureSuccessAsync(result);
				 
			return await result.Content.ReadAsAsync<ItemTestViewModel>();
		}

		/// <summary>
		/// Push new value
		/// </summary>
		/// <returns></returns>
		public virtual async Task PostAsync(ItemTestViewModel value)
		{
			var result = await HttpClient.PostAsJsonAsync<ItemTestViewModel>("api/Values", value);
		
			await EnsureSuccessAsync(result);
		}

		#endregion
	}
}

#endregion
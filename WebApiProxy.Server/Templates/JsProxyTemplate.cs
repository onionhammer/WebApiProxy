// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WebApiProxy.Server.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class JsProxyTemplate : JsProxyTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n(function ($) {\r\n    \"use strict\";\r\n\r\n    if (!$) {\r\n        throw \"jQuery is r" +
                    "equired\";\r\n    }\r\n\r\n    $.proxies = $.proxies || {\r\n        baseUrl: \"");
            
            #line 15 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Metadata.Host));
            
            #line default
            #line hidden
            this.Write("\"\r\n    };\r\n\r\n    function getQueryString(params, queryString) {\r\n        queryStr" +
                    "ing = queryString || \"\";\r\n        for (var prop in params) {\r\n            if (pa" +
                    "rams.hasOwnProperty(prop)) {\r\n                var val = getArgValue(params[prop]" +
                    ");\r\n                if (val === null) continue;\r\n\r\n                if (\"\" + val " +
                    "=== \"[object Object]\") {\r\n                    queryString = getQueryString(param" +
                    "s[prop], queryString);\r\n                    continue;\r\n                }\r\n\r\n    " +
                    "            if (queryString.length) {\r\n                    queryString += \"&\";\r\n" +
                    "                } else {\r\n                    queryString += \"?\";\r\n             " +
                    "   }\r\n                queryString = queryString + prop + \"=\" + val;\r\n           " +
                    " }\r\n        }\r\n        return queryString;\r\n    }\r\n\r\n    function getArgValue(va" +
                    "l) {\r\n        if (val === undefined || val === null) return null;\r\n        retur" +
                    "n val;\r\n    }\r\n\r\n    function invoke(url, type, urlParams, body) {\r\n        var " +
                    "ajaxOptions = $.extend({}, this.defaultOptions, {\r\n            url: $.proxies.ba" +
                    "seUrl + url,\r\n            type: type,\r\n            beforeSend: function (xhr) {\r" +
                    "\n                if (typeof (webApiAuthToken) != \"undefined\" && webApiAuthToken." +
                    "length > 0)\r\n                    xhr.setRequestHeader(\"Authorization\", \"Bearer \"" +
                    " + webApiAuthToken);\r\n            },\r\n        });\r\n\r\n        if (body) {\r\n      " +
                    "      ajaxOptions.data = body;\r\n        }\r\n\r\n        if (this.antiForgeryToken) " +
                    "{\r\n            var token = $.isFunction(this.antiForgeryToken) ? this.antiForger" +
                    "yToken() : this.antiForgeryToken;\r\n            if (token) {\r\n                aja" +
                    "xOptions.headers = ajaxOptions.headers || {};\r\n            }\r\n        }\r\n\r\n     " +
                    "   return $.ajax(ajaxOptions);\r\n    }\r\n\r\n    function defaultAntiForgeryTokenAcc" +
                    "essor() {\r\n        return $(\"input[name=__RequestVerificationToken]\").val();\r\n  " +
                    "  }\r\n\r\n    function endsWith(str, suffix) {\r\n        return str.indexOf(suffix, " +
                    "str.length - suffix.length) !== -1;\r\n    }\r\n\r\n    function appendPathDelimiter(u" +
                    "rl) {\r\n        if (!endsWith(url, \'/\')) {\r\n            return url + \'/\';\r\n      " +
                    "  }\r\n\r\n        return url;\r\n    }\r\n\r\n    /* Proxies */\r\n\r\n    ");
            
            #line 88 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
 foreach(var definition in this.Metadata.Definitions) { 
            
            #line default
            #line hidden
            this.Write("$.proxies.");
            
            #line 89 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(definition.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write(" = {\r\n        defaultOptions: {},\r\n        antiForgeryToken: defaultAntiForgeryTo" +
                    "kenAccessor,\r\n");
            
            #line 92 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
 foreach(var method in definition.ActionMethods) { 
    var allParameters = method.UrlParameters.AsEnumerable();

    if (method.BodyParameter != null) 
        allParameters = allParameters.Concat(new [] { method.BodyParameter });

    var selectedParameters = allParameters.Where(m => m != null).Select(m => m.Name).ToList();
    selectedParameters.Add("options");

    var parameterList = string.Join(",", selectedParameters);

    var url = ("\"" + method.Url.Replace("{", "\" + ")
        .Replace("}", " + \"") + "\"")
        .Replace(" + \"\"","");

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 107 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name.ToCamelCasing()));
            
            #line default
            #line hidden
            this.Write(": function(");
            
            #line 107 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterList));
            
            #line default
            #line hidden
            this.Write(") {\r\n            var defaults = { fields: [] };\r\n            var settings = $.ext" +
                    "end({}, defaults, options || {});\r\n            var url\t     = ");
            
            #line 110 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(url));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n            if(settings.fields.length > 0) {\r\n                url +=  url.in" +
                    "dexOf(\"?\") == -1 ? \"?\" : \"&\";\r\n                url += \"fields=\" + settings.field" +
                    "s.join();\r\n            }\r\n\r\n            return invoke.call(this, url, \"");
            
            #line 117 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Type.ToString().ToLower()));
            
            #line default
            #line hidden
            this.Write("\",");
            
            #line 117 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"

        if (method.UrlParameters.Any()) 
        {
            var parameters = string.Join(", ", method.UrlParameters.Select(parameter => $"{parameter.Name}: {parameter.Name}"));
            
            
            #line default
            #line hidden
            this.Write(" { ");
            
            #line 121 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameters));
            
            #line default
            #line hidden
            this.Write(" }");
            
            #line 121 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
 
        }
        else 
        { 
            
            
            #line default
            #line hidden
            this.Write("{}");
            
            #line 125 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"

        }
        if (method.BodyParameter != null) 
        {
            
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 129 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.BodyParameter.Name));
            
            #line default
            #line hidden
            this.Write(");");
            
            #line 129 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"

        } 
        else 
        {
            
            
            #line default
            #line hidden
            this.Write(");");
            
            #line 133 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
 
        }
            
            #line default
            #line hidden
            this.Write("\r\n        },\r\n");
            
            #line 137 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(" \r\n    };\r\n    ");
            
            #line 139 "C:\Development\WebApiProxy\WebApiProxy.Server\Templates\JsProxyTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n}(jQuery));\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class JsProxyTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
